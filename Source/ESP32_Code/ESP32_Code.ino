#include <FirebaseESP32.h>
#include <WiFiClient.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include <Preferences.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <HTTPClient.h>
#include <time.h>
#include <LiquidCrystal_I2C.h>

bool relayState[] = {false, false, false, false, false, false};  // Tr·∫°ng th√°i c·ªßa 6 relay
#define relay1 23    
#define relay2 19
#define relay3 18
#define relay4 5
#define relay5 32
#define relay6 33
int relays[] = {relay1, relay2, relay3, relay4, relay5, relay6};  // M·∫£ng ch·ª©a c√°c ch√¢n Relay

String trangthairelay[] = {
    "/button1",   // Relay 1
    "/button2",   // Relay 2
    "/button3",   // Relay 3
    "/button4",  // Relay 4
    "/button5",  // Relay 5
    "/button6",  // Relay 6
    "/C"
};

// K√≠ch th∆∞·ªõc m√†n h√¨nh OLED
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

// T·∫°o ƒë·ªëi t∆∞·ª£ng SSD1306
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

unsigned long lastReconnectAttempt = 0;
const unsigned long reconnectInterval = 5000;

AsyncWebServer server(80);
Preferences preferences;

FirebaseData firebaseData;
FirebaseAuth auth;
FirebaseConfig config;

// L∆∞u c·∫•u h√¨nh ƒë√£ nh·∫≠p 
void handleSave(AsyncWebServerRequest *request) {
  if (request->hasParam(PARAM_SSID, true) && request->hasParam(PARAM_PASS, true)) {
    String ssid = request->getParam(PARAM_SSID, true)->value();
    String password = request->getParam(PARAM_PASS, true)->value();

    preferences.begin("wifi", false);
    preferences.putString("ssid", ssid);
    preferences.putString("pass", password);
    preferences.end();

    request->send_P(200, "text/html", successPage);
    delay(1000);
    ESP.restart();
  } else {
    request->send(400, "text/plain", "Thi·∫øu tham s·ªë");
  }
}

// Ch·∫ø ƒë·ªô AP
void startAPMode() {
  WiFi.mode(WIFI_AP);
  WiFi.softAP("IOT Home", "88888888");
  Serial.println("üöÄ ƒê√£ b·∫≠t AP cho c·∫•u h√¨nh WiFi");

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", htmlPage);
  });

  server.on("/save", HTTP_POST, handleSave);

  server.begin();
}

// K·∫øt n·ªëi l·∫°i khi m·∫•t WiFi
void reconnectWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    unsigned long now = millis();
    if (now - lastReconnectAttempt >= reconnectInterval) {
      lastReconnectAttempt = now;
      Serial.println("üîÑ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i WiFi...");
      WiFi.disconnect();
      WiFi.reconnect();
      if (WiFi.status() == WL_CONNECTED) {
      configTime(7 * 3600, 0, "pool.ntp.org", "time.google.com", "time.cloudflare.com");}
    }
  }
}

//G·ª≠i d·ªØ li·ªáu l√™n Firebase s·ªë nguy√™n
void sendFirebase(String path, int value) {
  if (Firebase.setInt(firebaseData, path, value)) {
  } else {
    Serial.println("L·ªói khi g·ª≠i d·ªØ li·ªáu!");
  }
}

//G·ª≠i d·ªØ li·ªáu l√™n Firebase s·ªë th·ª±c
void sendFirebase(String path, float value) {
  if (Firebase.setFloat(firebaseData, path, value)) {
  } else {
    Serial.println("L·ªói khi g·ª≠i d·ªØ li·ªáu float!");
  }
}

// ƒê·ªçc d·ªØ li·ªáu t·ª´ Firebase
int receiveFirebase(String path) {
  if (Firebase.getInt(firebaseData, path)) {
    int data = firebaseData.intData();
    return data;
  } else {
    Serial.println("L·ªói khi nh·∫≠n d·ªØ li·ªáu!");
    return -1; // Tr·∫£ v·ªÅ -1 n·∫øu l·ªói
  }
}

void setup() {
  Serial.begin(115200);
  Serial2.begin(115200, SERIAL_8N1, 16, 17);  // RXD2=16, TXD2=17
  // K·∫øt n·ªëi WiFi
  preferences.begin("wifi", true);
  String ssid = preferences.getString("ssid", "");
  String pass = preferences.getString("pass", "");
  preferences.end();

    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    display.clearDisplay(); 

    for (int i = 0; i < 6; i++) {  
      pinMode(relays[i], OUTPUT);
      digitalWrite(relays[i], 0);
    }

    lcd.init();
    lcd.backlight();
    lcd.createChar(0, degreeSymbol); 

  // C·∫•u h√¨nh Firebase
  config.host = FIREBASE_HOST;
  config.signer.tokens.legacy_token = FIREBASE_AUTH;

  if (ssid != "") {
    WiFi.begin(ssid.c_str(), pass.c_str());
    Serial.print("üîÑ ƒêang k·∫øt n·ªëi WiFi: ");
    Serial.println(ssid);
    if (WiFi.waitForConnectResult() == WL_CONNECTED) {
      Serial.println(" K·∫øt n·ªëi WiFi th√†nh c√¥ng!");
      // Kh·ªüi t·∫°o Firebase
      Firebase.begin(&config, &auth);
      Firebase.reconnectWiFi(true);
    } else {
      Serial.println("‚ùå K·∫øt n·ªëi th·∫•t b·∫°i. B·∫≠t ch·∫ø ƒë·ªô c·∫•u h√¨nh.");
      startAPMode();
    }
  } else {
    Serial.println("‚öôÔ∏è Ch∆∞a c√≥ c·∫•u h√¨nh WiFi. B·∫≠t ch·∫ø ƒë·ªô c·∫•u h√¨nh.");
    startAPMode();
  }
    configTime(7 * 3600, 0, "pool.ntp.org", "time.google.com", "time.cloudflare.com");//ESP32 k·∫øt n·ªëi NTP Server v√† l·∫•y th·ªùi gian m·ªôt l·∫ßn duy nh·∫•t. khi kh·ªüi ƒë·ªông

    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    display.clearDisplay(); 

    for (int i = 0; i < 6; i++) {  
      pinMode(relays[i], OUTPUT);
      digitalWrite(relays[i], 0);
    }
    // ƒë·ªìng b√¥ tr·∫°ng th√°i n√∫t nh·∫•n 
    for (int i = 0; i < 6; i++) {
    sendFirebase(trangthairelay[i],0) ;
    }
}


// H√†m g·ª≠i tin nh·∫Øn v√† cu·ªôc g·ªçi c·∫£nh b√°o l√™n Telegram
void sendTelagramCall(String message) {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        String url = "https://api.callmebot.com/start.php?source=web&user=" + String(User) +
                     "&text=" + message + "&lang=vi-VN-Standard-C";

        Serial.println("üì§ ƒêang g·ª≠i: " + url);
        http.begin(url);
        int httpResponseCode = http.GET();
        Serial.println("ƒê√£ g·ª≠i !");

        http.end();
    } else {
        Serial.println("‚ö† WiFi ch∆∞a k·∫øt n·ªëi!");
    }
}

// getTimeFromNTP(); l·∫•y d·ªØ li·ªáu time cho vi·ªác g·ª≠i tin nh·∫Øn
String getTimeFromNTP() {
    time_t now;
    struct tm timeinfo;
    if (!getLocalTime(&timeinfo)) {
        return "L·ªói+NTP!";
    }
    char timeString[20];
    strftime(timeString, sizeof(timeString), "%H:%M:%S %d/%m/%Y", &timeinfo);
    String formattedTime = String(timeString);
    
    // Chuy·ªÉn k√Ω t·ª± ƒë·∫∑c bi·ªát sang URL Encoding
    formattedTime.replace(" ", "+");  // D·∫•u c√°ch
    formattedTime.replace(":", "%3A");  // D·∫•u hai ch·∫•m
    formattedTime.replace("/", "%2F");  // D·∫•u g·∫°ch ch√©o
    
    return formattedTime;
}

// ƒê·ªçc d·ªØ li·ªáu UART
float nhietDo = 0.0;
float doAm = 0.0;
String doam_str;
String nhietdo_str;
int Value_Gas;
int sendFlag = 1;

// C√°c bi·∫øn flag ƒë·ªÉ b√°o c√≥ d·ªØ li·ªáu m·ªõi
bool newDHTData = false;
bool newGasData = false;
bool newRelayData = false;
// ƒê·ªçc d·ªØ li·ªáu UART
String uartBuffer = "";
void readSerial2() {
  while (Serial2.available()) {
    char c = Serial2.read();
    if (c == '\n') {
      uartBuffer.trim();
      Serial.println("üîç Nh·∫≠n d·ªØ li·ªáu: " + uartBuffer); // Debug: In ra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c

      if (uartBuffer.indexOf(',') > 0) {
        int commaIndex = uartBuffer.indexOf(',');
        nhietDo = uartBuffer.substring(0, commaIndex).toFloat();
        doAm = uartBuffer.substring(commaIndex + 1).toFloat();
        newDHTData = true;
        Serial.println("üì° D·ªØ li·ªáu DHT: Nhi·ªát ƒë·ªô = " + String(nhietDo, 1) + "¬∞C, ƒê·ªô ·∫©m = " + String(doAm, 1) + "%"); // Debug: In ra nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m
      } 
      
      else if (uartBuffer.startsWith("L")) {
        int relayNum = uartBuffer.substring(1).toInt();
        if (relayNum >= 1 && relayNum <= 6) {
          relayState[relayNum - 1] = !relayState[relayNum - 1];
          digitalWrite(relays[relayNum - 1], relayState[relayNum - 1]);
          newRelayData = true;
          Serial.println("üîÑ Thay ƒë·ªïi tr·∫°ng th√°i Relay " + String(relayNum) + ": " + (relayState[relayNum - 1] ? "B·∫¨T" : "T·∫ÆT")); // Debug: In ra tr·∫°ng th√°i relay
        }

      } else if (uartBuffer.startsWith("G")) {
        Value_Gas = uartBuffer.substring(1).toInt();
        newGasData = true;
        Serial.println("üö® Nh·∫≠n d·ªØ li·ªáu Gas: " + String(Value_Gas)); // Debug: In ra gi√° tr·ªã gas
      }

      uartBuffer = ""; // X√≥a buffer sau khi x·ª≠ l√Ω
    } else {
      uartBuffer += c;
    }
  }
}

int lastCState = 0;
// truy·ªÅn th√¥ng Firebase
void handleSensorFirebase() {
    if (WiFi.status() != WL_CONNECTED) {
    // ‚ùå Kh√¥ng c√≥ WiFi => kh√¥ng g·ª≠i/nh·∫≠n Firebase
    return;
  }
  if (newDHTData) {
    sendFirebase("DoAm", doAm);
    sendFirebase("NhietDo", nhietDo);
    Serial.println("üì• DHT: " + String(nhietDo,1) + "¬∞C, " + String(doAm,1) + "%");
    newDHTData = false;
  }

  if (newRelayData) {
    for (int i = 0; i < 6; i++) {
      sendFirebase(trangthairelay[i], relayState[i] ? 1 : 0);
    }
    newRelayData = false;
  }

  if (newGasData) {
    if (Value_Gas == 0) {
      sendFirebase("/Gas", 0);
      sendFlag = 1;
    } else {
      if (sendFlag == 1) {
        String currentTime = getTimeFromNTP();
        sendFirebase("/Gas", 1);
        sendFlag = 0;
      }
    }
    newGasData = false;
  }

  // X·ª≠ l√Ω relay 
  for (int i = 0; i < 6; i++) {
    int state = receiveFirebase(trangthairelay[i]); // ƒê·ªçc tr·∫°ng th√°i t·ª´ Firebase
    if (state != -1 && state != relayState[i]) {  // Ch·ªâ x·ª≠ l√Ω khi c√≥ thay ƒë·ªïi
      relayState[i] = state;
      digitalWrite(relays[i], relayState[i]);
      Serial.println("üîÑ Relay " + String(i + 1) + ": " + (relayState[i] ? "B·∫¨T" : "T·∫ÆT"));
    }
  }
    // X·ª≠ l√Ω n√∫t "C·ª≠a" (·ªü v·ªã tr√≠ 6 trong m·∫£ng)
  int cState = receiveFirebase(trangthairelay[6]);
  if (cState != -1 && cState == 1 && lastCState == 0) {
    // Ch·ªâ g·ª≠i khi chuy·ªÉn t·ª´ 0 -> 1
    Serial.println("C·ª≠a: g·ª≠i sang t√≠n hi·ªáu ");
    Serial2.println("C1");

    // Reset v·ªÅ 0 sau khi g·ª≠i
    sendFirebase(trangthairelay[6], 0);
  }
  lastCState = cState;
}

bool flagGas = false;       // Ph√°t hi·ªán gas
bool autoGasControl = false;  // C·ªù relay ƒë∆∞·ª£c b·∫≠t do gas, d√πng ƒë·ªÉ bi·∫øt khi n√†o c·∫ßn t·∫Øt

//Hi·ªÉn th·ªã OLED
void Display_Oled() {
  lcd.setCursor(0,0);
  lcd.print("T:");
  lcd.setCursor(2,0);
  lcd.print(nhietDo);
  lcd.setCursor(7,0);  
  lcd.write(byte(0));      
  lcd.print("C");

  lcd.setCursor(0,1);
  lcd.print("AH:");
  lcd.setCursor(3,1);
  lcd.print(doAm);
  lcd.setCursor(8,1);
  lcd.print("%");

  lcd.setCursor(10,0);
  lcd.print("|");
  lcd.setCursor(10,1);
  lcd.print("|");
  lcd.setCursor(12,0);
  lcd.print("GAS");

  if(Value_Gas==1){ 
    lcd.setCursor(12,1);
    lcd.print("YES");
    flagGas=true;
  } else {
    lcd.setCursor(12,1);
    lcd.print("NO ");
    flagGas = false;

  }

}

void Gass() {
  if (flagGas) {
    // N·∫øu ph√°t hi·ªán gas th√¨ b·∫≠t relay 6 n·∫øu ch∆∞a b·∫≠t
    if (!relayState[5]) {
      digitalWrite(relays[5], HIGH);
      relayState[5] = true;
      autoGasControl = true;  // ƒê√°nh d·∫•u l√† b·∫≠t do gas
    }
  } else {
    // N·∫øu kh√¥ng ph√°t hi·ªán gas, v√† relay tr∆∞·ªõc ƒë√≥ ƒë∆∞·ª£c b·∫≠t do gas th√¨ m·ªõi t·∫Øt
    if (autoGasControl) {
      digitalWrite(relays[5], LOW);
      relayState[5] = false;
      autoGasControl = false;
    }
  }
}

bool  FlagConfi = false ;
void loop() {

    if (WiFi.status() == WL_CONNECTED && FlagConfi == false) {
    // Kh·ªüi t·∫°o Firebase
    Firebase.begin(&config, &auth);
    Firebase.reconnectWiFi(true);
    configTime(7 * 3600, 0, "pool.ntp.org", "time.google.com", "time.cloudflare.com");//ESP32 k·∫øt n·ªëi NTP Server v√† l·∫•y th·ªùi gian m·ªôt l·∫ßn duy nh·∫•t. khi kh·ªüi ƒë·ªông
    FlagConfi = true;
    // Serial.println(" WiFi OK ");
  } else if(WiFi.status() != WL_CONNECTED) {
    Serial.println(" Ch∆∞a c√≥ WiFi. Ch·ªù k·∫øt n·ªëi l·∫°i...");
    reconnectWiFi();
  }

  readSerial2();            // ƒê·ªçc d·ªØ li·ªáu UART
  handleSensorFirebase();   // G·ª≠i d·ªØ li·ªáu Firebase n·∫øu c√≥
  Display_Oled();
  Gass();
}

